{"version":3,"sources":["/src/index.ts","/package.json?url"],"sourcesContent":["import {\n    watch as farmWatch,\n    start as farmStart,\n    build as farmBuild,\n    type JsPlugin,\n    getConfigFilePath,\n    type FarmCLIOptions,\n    type UserConfig,\n    version as FarmCoreVersion,\n    NoopLogger,\n} from '@farmfe/core';\nimport cac from 'cac';\nimport { readFileSync } from 'node:fs';\nimport autoExecute, { NormalizeOption } from './plugins/auto-execute';\nimport { ExecuteMode, type CommonOptions } from './types/options';\nimport autoExternal from './plugins/auto-external';\nimport path from 'node:path';\nimport { isBoolean, isString } from 'lodash-es';\nimport { logger } from './config/constant';\n\nconst { version } = JSON.parse(readFileSync(new URL('../package.json', import.meta.url)).toString());\n\nfunction buildPluginsByCommonOption(options: CommonOptions): JsPlugin[] {\n    const plugins = [];\n\n    plugins.push(autoExecute(options));\n\n    if (options.autoExternal) {\n        plugins.push(autoExternal());\n    }\n\n    return plugins;\n}\n\ntype InlineConfig = FarmCLIOptions & UserConfig;\n\nfunction createInlineConfig(options: CommonOptions): InlineConfig {\n    return {\n        root: options.root,\n        configPath: options.config,\n        plugins: buildPluginsByCommonOption(options),\n        logger: logger,\n    };\n}\n\nasync function autoStart(options: CommonOptions) {\n    const preNormalizeOption = await NormalizeOption.fromCommonOption(options, new NoopLogger());\n    const inlineConfig = createInlineConfig(options);\n    // console.log(preNormalizeOption.options);\n    switch (preNormalizeOption.options.execute.type) {\n        case ExecuteMode.Browser:\n            return farmStart(inlineConfig);\n        case ExecuteMode.Node:\n        case ExecuteMode.Custom:\n            return options.noWatch ? farmBuild(inlineConfig) : farmWatch(inlineConfig);\n    }\n}\n\nasync function start(options: CommonOptions) {\n    const inlineConfig = createInlineConfig(options);\n    await farmStart(inlineConfig);\n}\n\nasync function watch(options: CommonOptions) {\n    const inlineConfig = createInlineConfig(options);\n    await farmWatch(inlineConfig);\n}\n\nasync function build(options: CommonOptions) {\n    if (options.noExecute && !options.noWatch) {\n        await watch(options);\n        return;\n    }\n\n    const inlineConfig = createInlineConfig(options);\n    await farmBuild(inlineConfig);\n}\n\nconst cli = cac('farmup');\n\ncli.option('-w, --watch [...files]', 'watch files', { default: false })\n    .option('-e, --exec [file]', 'custom execute command')\n    .option('-o, --output [dir]', 'output directory, default \"./dist\" if not set in config')\n    .option('--mode [mode]', 'mode for build, default is development, choose one from \"development\" or \"production\"')\n    .option('--minify', 'minify for output')\n    .option('-c, --config [config]', 'config path, if not path, it will be auto find')\n    .option('--no-config', 'if farm.config.[ext] exists, it will be ignore')\n    .option('--format [format]', 'choose one from \"cjs\" or \"esm\"')\n    .option('--external [...external]', 'external')\n    .option('--no-auto-external', 'if not found module, auto as external', { default: true })\n    .option('--sourcemap [sourcemap]', 'generate sourcemap or not')\n    .option(\n        '--target [target]',\n        \"target for output, default is node, support 'browser'、'node'、'node16'、'node-legacy'、'node-next'、'browser-legacy'、'browser-es2015'、'browser-es2017'、'browser-esnext'\",\n    );\n\n// biome-ignore lint/suspicious/noExplicitAny: <explanation>\nasync function commonOptionsFromArgs(args: Record<string, any>): Promise<Partial<CommonOptions>> {\n    const root = process.cwd();\n    const configPath =\n        typeof args.config === 'string'\n            ? path.isAbsolute(args.config)\n                ? args.config\n                : path.resolve(root, args.config)\n            : args.config\n              ? await getConfigFilePath(root)\n              : undefined;\n    const execute = isString(args.exec) && !isBoolean(args.exec) ? args.exec : undefined;\n\n    return {\n        root,\n        target: args.target,\n        args: args['--'],\n        mode: args.mode,\n        autoExternal: args.autoExternal,\n        execute,\n        format: args.format,\n        config: configPath,\n        minify: args.minify,\n        noWatch: args.watch === false,\n        noExecute: args.exec === false,\n        external: Array.isArray(args.external) ? args.external : [args.external].filter(Boolean),\n        watchFiles: [args.watch]\n            .flat()\n            .map((item) => (item === true ? undefined : item))\n            .filter(Boolean),\n        outputDir: args.output || './dist',\n        sourcemap: args.sourcemap === 'false' ? false : args.sourcemap === 'true' ? true : args.sourcemap,\n    };\n}\n\ncli.command('[entry]', 'start ts/js/html file').action(async (entry, options) => {\n    autoStart({\n        entry: Array.isArray(entry) ? entry : [entry].filter(Boolean),\n        ...(await commonOptionsFromArgs(options)),\n    });\n});\n\ncli.command('build [entry]', 'start watch for node or custom command')\n    .option('--no-exec', 'disable execute')\n    .action(async (entry, options) => {\n        build({\n            entry: Array.isArray(entry) ? entry : [entry].filter(Boolean),\n            ...(await commonOptionsFromArgs(options)),\n        });\n    });\ncli.command('start [entry]', 'start server for html file').action(async (entry, options) => {\n    start({\n        entry: Array.isArray(entry) ? entry : [entry].filter(Boolean),\n        ...(await commonOptionsFromArgs(options)),\n    });\n});\n\ncli.showHelpOnExit = true;\n\ncli.showVersionOnExit = true;\n\ncli.version(`${version} (core: ${FarmCoreVersion})`);\n\ncli.parse();\n","export default new URL(/* $farm-ignore */\"./package.6949fb35-ed7404.json?url\", import.meta.url)"],"names":[],"mappings":";;;;AAUO;AAAA;AAEsB;AAAA;AAAA;AAAA;AAIZ;AAAA;AAAA;AAI+B;AAAA;AAEU;AACpC;AAEO;AAEC;AACT;AACjB;AAEO;AACX;AAIkD;AACvC;AACe;AACQ;AACU;AAC9B;AACV;AACJ;AAE+C;AACgC;AACnC;AAEO;AACnB;AACH;AACA;AACE;AAC0C;AACrE;AACJ;AAE2C;AACC;AACxB;AACpB;AAE2C;AACC;AACxB;AACpB;AAE2C;AACI;AAC3B;AACZ;AACJ;AAEwC;AACxB;AACpB;AAEgB;AAEoC;AAAW;AASY;AAAW;AAI9E;AAIsD;AAClC;AAQZ;AAC+D;AAEpE;AACH;AACmB;AACH;AACD;AACgB;AAC/B;AACmB;AACX;AACW;AACK;AACC;AACgC;AAAc;AAAS;AACpE;AAAW;AAGX;AACc;AACuE;AACrG;AACJ;AAEqE;AACvD;AACgC;AAAC;AAAc;AACb;AAC5C;AACJ;AAI0B;AACZ;AACoC;AAAC;AAAc;AACb;AAC5C;AACJ;AAC4E;AACtE;AACoC;AAAC;AAAc;AACb;AAC5C;AACJ;AAEqB;AAEG;AAE2B;AAE1C;AAAA;AAAA;AAAA;AAAA;AAAA;AC/JqF;AAAA"}