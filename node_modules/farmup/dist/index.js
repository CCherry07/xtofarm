import "./__farm_runtime.c56d79e9.mjs";import "./index_8901.81cb1a0f.js";import "./plugin_178e.5590ad75.js";import "./plugin_7d86.2f7404d7.js";import "./plugin_9f6e.0685d4b3.js";import "./plugin_a4ec.1fee2cb9.js";import * as __farm_external_module__farmfe_core from "@farmfe/core";import * as __farm_external_module_node_fs from "node:fs";import * as __farm_external_module_node_path from "node:path";(globalThis || window || global)['897f3a29e35d6dec0be3b29e442ddaba'].__farm_module_system__.setExternalModules({"@farmfe/core": __farm_external_module__farmfe_core && __farm_external_module__farmfe_core.default && !__farm_external_module__farmfe_core.__esModule ? {...__farm_external_module__farmfe_core,__esModule:true} : {...__farm_external_module__farmfe_core},"node:fs": __farm_external_module_node_fs && __farm_external_module_node_fs.default && !__farm_external_module_node_fs.__esModule ? {...__farm_external_module_node_fs,__esModule:true} : {...__farm_external_module_node_fs},"node:path": __farm_external_module_node_path && __farm_external_module_node_path.default && !__farm_external_module_node_path.__esModule ? {...__farm_external_module_node_path,__esModule:true} : {...__farm_external_module_node_path}});(function(_){for(var r in _){_[r].__farm_resource_pot__='index_ef80.js';(globalThis || window || global)['897f3a29e35d6dec0be3b29e442ddaba'].__farm_module_system__.register(r,_[r])}})({"953dfae2":function  (module, exports, farmRequire, farmDynamicRequire) {
    module._m(exports);
    var _f_package = module.i(farmRequire("a6da116c"));
    var _f_core = farmRequire('@farmfe/core');
    var _f_cac = module.i(farmRequire("fad6b15f"));
    var _f_node_fs = farmRequire('node:fs');
    var _f_auto_execute = module.w(farmRequire("97b7a878"));
    var _f_options = farmRequire("c461562d");
    var _f_auto_external = module.i(farmRequire("a98420ec"));
    var _f_node_path = module.i(farmRequire('node:path'));
    var _f_lodash_es = farmRequire("6f6ce6ec");
    var _f_constant = farmRequire("fe6f5e17");
    const { version } = JSON.parse(_f_node_fs.readFileSync(new URL({
        "../package.json": module.f(_f_package)
    }['../package.json'], import.meta.url)).toString());
    function buildPluginsByCommonOption(options) {
        const plugins = [];
        plugins.push(module.f(_f_auto_execute)(options));
        if (options.autoExternal) {
            plugins.push(module.f(_f_auto_external)());
        }
        return plugins;
    }
    function createInlineConfig(options) {
        return {
            root: options.root,
            configPath: options.config,
            plugins: buildPluginsByCommonOption(options),
            logger: _f_constant.logger
        };
    }
    async function autoStart(options) {
        const preNormalizeOption = await _f_auto_execute.NormalizeOption.fromCommonOption(options, new _f_core.NoopLogger());
        const inlineConfig = createInlineConfig(options);
        switch(preNormalizeOption.options.execute.type){
            case _f_options.ExecuteMode.Browser:
                return _f_core.start(inlineConfig);
            case _f_options.ExecuteMode.Node:
            case _f_options.ExecuteMode.Custom:
                return options.noWatch ? _f_core.build(inlineConfig) : _f_core.watch(inlineConfig);
        }
    }
    async function start(options) {
        const inlineConfig = createInlineConfig(options);
        await _f_core.start(inlineConfig);
    }
    async function watch(options) {
        const inlineConfig = createInlineConfig(options);
        await _f_core.watch(inlineConfig);
    }
    async function build(options) {
        if (options.noExecute && !options.noWatch) {
            await watch(options);
            return;
        }
        const inlineConfig = createInlineConfig(options);
        await _f_core.build(inlineConfig);
    }
    const cli = module.f(_f_cac)('farmup');
    cli.option('-w, --watch [...files]', 'watch files', {
        default: false
    }).option('-e, --exec [file]', 'custom execute command').option('-o, --output [dir]', 'output directory, default "./dist" if not set in config').option('--mode [mode]', 'mode for build, default is development, choose one from "development" or "production"').option('--minify', 'minify for output').option('-c, --config [config]', 'config path, if not path, it will be auto find').option('--no-config', 'if farm.config.[ext] exists, it will be ignore').option('--format [format]', 'choose one from "cjs" or "esm"').option('--external [...external]', 'external').option('--no-auto-external', 'if not found module, auto as external', {
        default: true
    }).option('--sourcemap [sourcemap]', 'generate sourcemap or not').option('--target [target]', "target for output, default is node, support 'browser'、'node'、'node16'、'node-legacy'、'node-next'、'browser-legacy'、'browser-es2015'、'browser-es2017'、'browser-esnext'");
    async function commonOptionsFromArgs(args) {
        const root = process.cwd();
        const configPath = typeof args.config === 'string' ? module.f(_f_node_path).isAbsolute(args.config) ? args.config : module.f(_f_node_path).resolve(root, args.config) : args.config ? await _f_core.getConfigFilePath(root) : undefined;
        const execute = _f_lodash_es.isString(args.exec) && !_f_lodash_es.isBoolean(args.exec) ? args.exec : undefined;
        return {
            root,
            target: args.target,
            args: args['--'],
            mode: args.mode,
            autoExternal: args.autoExternal,
            execute,
            format: args.format,
            config: configPath,
            minify: args.minify,
            noWatch: args.watch === false,
            noExecute: args.exec === false,
            external: Array.isArray(args.external) ? args.external : [
                args.external
            ].filter(Boolean),
            watchFiles: [
                args.watch
            ].flat().map((item)=>item === true ? undefined : item).filter(Boolean),
            outputDir: args.output || './dist',
            sourcemap: args.sourcemap === 'false' ? false : args.sourcemap === 'true' ? true : args.sourcemap
        };
    }
    cli.command('[entry]', 'start ts/js/html file').action(async (entry, options)=>{
        autoStart({
            entry: Array.isArray(entry) ? entry : [
                entry
            ].filter(Boolean),
            ...await commonOptionsFromArgs(options)
        });
    });
    cli.command('build [entry]', 'start watch for node or custom command').option('--no-exec', 'disable execute').action(async (entry, options)=>{
        build({
            entry: Array.isArray(entry) ? entry : [
                entry
            ].filter(Boolean),
            ...await commonOptionsFromArgs(options)
        });
    });
    cli.command('start [entry]', 'start server for html file').action(async (entry, options)=>{
        start({
            entry: Array.isArray(entry) ? entry : [
                entry
            ].filter(Boolean),
            ...await commonOptionsFromArgs(options)
        });
    });
    cli.showHelpOnExit = true;
    cli.showVersionOnExit = true;
    cli.version(`${version} (core: ${_f_core.version})`);
    cli.parse();
}
,
"a6da116c":function  (module, exports, farmRequire, farmDynamicRequire) {
    module._m(exports);
    exports.default = new URL("./package.6949fb35-ed7404.json?url", import.meta.url);
}
,});(globalThis || window || global)['897f3a29e35d6dec0be3b29e442ddaba'].__farm_module_system__.setInitialLoadedResources(['index_8901.81cb1a0f.js','plugin_178e.5590ad75.js','plugin_7d86.2f7404d7.js','plugin_9f6e.0685d4b3.js','plugin_a4ec.1fee2cb9.js']);(globalThis || window || global)['897f3a29e35d6dec0be3b29e442ddaba'].__farm_module_system__.setDynamicModuleResourcesMap({  });var farmModuleSystem = (globalThis || window || global)['897f3a29e35d6dec0be3b29e442ddaba'].__farm_module_system__;farmModuleSystem.bootstrap();var entry = farmModuleSystem.require("953dfae2");
//# sourceMappingURL=index.js.map